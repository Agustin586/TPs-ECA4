//$file${.::mef_awg.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: Tp_ECA_IV_Awg.qm
// File:  ${.::mef_awg.h}
//
// This code has been generated by QM 6.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// Copyright (c) 2005 Quantum Leaps, LLC
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for licensees
// interested in retaining the proprietary status of the generated code.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::mef_awg.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef MEF_AWG_H_
#define MEF_AWG_H_

//$declare${AOs_Awg} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${AOs_Awg::Awg} ............................................................
typedef struct {
// protected:
    QActive super;

// public:
    QTimeEvt time1segEvt;
} Awg;

// public:
void Awg_Awg_ctor(Awg * const me);

// protected:
QState Awg_initial(Awg * const me, void const * const par);
QState Awg_Reset(Awg * const me, QEvt const * const e);
QState Awg_Configuracion(Awg * const me, QEvt const * const e);
QState Awg_Tipo_Func(Awg * const me, QEvt const * const e);
QState Awg_Freq(Awg * const me, QEvt const * const e);
QState Awg_Amplitud(Awg * const me, QEvt const * const e);
QState Awg_Offset(Awg * const me, QEvt const * const e);
QState Awg_Confirm_config(Awg * const me, QEvt const * const e);
QState Awg_Salida(Awg * const me, QEvt const * const e);

//${AOs_Awg::setEvt_Econder} .................................................
void setEvt_Econder(void);

//${AOs_Awg::confirm_evt} ....................................................
extern QEvt confirm_evt;

//${AOs_Awg::setEvt_Confirm} .................................................
void setEvt_Confirm(void);

//${AOs_Awg::inst} ...........................................................
extern Awg inst;

//${AOs_Awg::AwgSignals} .....................................................
extern enum AwgSignals;

//${AOs_Awg::encoder_evt} ....................................................
extern QEvt encoder_evt;

//${AOs_Awg::init_evt} .......................................................
extern QEvt init_evt;

//${AOs_Awg::setEvt_Init} ....................................................
void setEvt_Init(void);

//${AOs_Awg::avanc_evt} ......................................................
extern QEvt avanc_evt;

//${AOs_Awg::setEvt_Avanc} ...................................................
void setEvt_Avanc(void);
//$enddecl${AOs_Awg} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
